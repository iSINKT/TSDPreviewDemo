//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSD.PreviewDemo.Client.AxWebServices
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="CallContext", Namespace="http://schemas.microsoft.com/dynamics/2010/01/datacontracts")]
    public partial class CallContext : object
    {
        
        private string CompanyField;
        
        private string LanguageField;
        
        private string LogonAsUserField;
        
        private string MessageIdField;
        
        private string PartitionKeyField;
        
        private System.Collections.Generic.Dictionary<string, string> PropertyBagField;
        
        [DataMember()]
        public string Company
        {
            get
            {
                return this.CompanyField;
            }
            set
            {
                this.CompanyField = value;
            }
        }
        
        [DataMember()]
        public string Language
        {
            get
            {
                return this.LanguageField;
            }
            set
            {
                this.LanguageField = value;
            }
        }
        
        [DataMember()]
        public string LogonAsUser
        {
            get
            {
                return this.LogonAsUserField;
            }
            set
            {
                this.LogonAsUserField = value;
            }
        }
        
        [DataMember()]
        public string MessageId
        {
            get
            {
                return this.MessageIdField;
            }
            set
            {
                this.MessageIdField = value;
            }
        }
        
        [DataMember()]
        public string PartitionKey
        {
            get
            {
                return this.PartitionKeyField;
            }
            set
            {
                this.PartitionKeyField = value;
            }
        }
        
        [DataMember()]
        public System.Collections.Generic.Dictionary<string, string> PropertyBag
        {
            get
            {
                return this.PropertyBagField;
            }
            set
            {
                this.PropertyBagField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="XppObjectBase", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Ax.Xpp")]
    [KnownType(typeof(MCIServiceResponse))]
    [KnownType(typeof(MCIServiceRequest))]
    public partial class XppObjectBase : object
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="MCIServiceResponse", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MCIServiceResponse : XppObjectBase
    {
        
        private string AppVersionNumField;
        
        private string BusinessProcessCaptionField;
        
        private string BusinessProcessStateField;
        
        private int CursorPositionField;
        
        private System.DateTime DateTimeOfResponseField;
        
        private string ErrorCodeField;
        
        private string PackedResponseField;
        
        private MCIResponseStatus ResponseStatusField;
        
        private string ServiceMethodField;
        
        private string SessionIdField;
        
        private string TextMessageField;
        
        [DataMember()]
        public string AppVersionNum
        {
            get
            {
                return this.AppVersionNumField;
            }
            set
            {
                this.AppVersionNumField = value;
            }
        }
        
        [DataMember()]
        public string BusinessProcessCaption
        {
            get
            {
                return this.BusinessProcessCaptionField;
            }
            set
            {
                this.BusinessProcessCaptionField = value;
            }
        }
        
        [DataMember()]
        public string BusinessProcessState
        {
            get
            {
                return this.BusinessProcessStateField;
            }
            set
            {
                this.BusinessProcessStateField = value;
            }
        }
        
        [DataMember()]
        public int CursorPosition
        {
            get
            {
                return this.CursorPositionField;
            }
            set
            {
                this.CursorPositionField = value;
            }
        }
        
        [DataMember()]
        public System.DateTime DateTimeOfResponse
        {
            get
            {
                return this.DateTimeOfResponseField;
            }
            set
            {
                this.DateTimeOfResponseField = value;
            }
        }
        
        [DataMember()]
        public string ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [DataMember()]
        public string PackedResponse
        {
            get
            {
                return this.PackedResponseField;
            }
            set
            {
                this.PackedResponseField = value;
            }
        }
        
        [DataMember()]
        public MCIResponseStatus ResponseStatus
        {
            get
            {
                return this.ResponseStatusField;
            }
            set
            {
                this.ResponseStatusField = value;
            }
        }
        
        [DataMember()]
        public string ServiceMethod
        {
            get
            {
                return this.ServiceMethodField;
            }
            set
            {
                this.ServiceMethodField = value;
            }
        }
        
        [DataMember()]
        public string SessionId
        {
            get
            {
                return this.SessionIdField;
            }
            set
            {
                this.SessionIdField = value;
            }
        }
        
        [DataMember()]
        public string TextMessage
        {
            get
            {
                return this.TextMessageField;
            }
            set
            {
                this.TextMessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="MCIServiceRequest", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MCIServiceRequest : XppObjectBase
    {
        
        private string AppVersionNumField;
        
        private NoYes BusinessProcessIsLockedField;
        
        private int CursorPositionField;
        
        private string DeviceIdField;
        
        private string PackedRequestField;
        
        private string ServiceMethodField;
        
        private string SessionIdField;
        
        [DataMember()]
        public string AppVersionNum
        {
            get
            {
                return this.AppVersionNumField;
            }
            set
            {
                this.AppVersionNumField = value;
            }
        }
        
        [DataMember()]
        public NoYes BusinessProcessIsLocked
        {
            get
            {
                return this.BusinessProcessIsLockedField;
            }
            set
            {
                this.BusinessProcessIsLockedField = value;
            }
        }
        
        [DataMember()]
        public int CursorPosition
        {
            get
            {
                return this.CursorPositionField;
            }
            set
            {
                this.CursorPositionField = value;
            }
        }
        
        [DataMember()]
        public string DeviceId
        {
            get
            {
                return this.DeviceIdField;
            }
            set
            {
                this.DeviceIdField = value;
            }
        }
        
        [DataMember()]
        public string PackedRequest
        {
            get
            {
                return this.PackedRequestField;
            }
            set
            {
                this.PackedRequestField = value;
            }
        }
        
        [DataMember()]
        public string ServiceMethod
        {
            get
            {
                return this.ServiceMethodField;
            }
            set
            {
                this.ServiceMethodField = value;
            }
        }
        
        [DataMember()]
        public string SessionId
        {
            get
            {
                return this.SessionIdField;
            }
            set
            {
                this.SessionIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="NoYes", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Ax.Xpp")]
    public enum NoYes : int
    {
        
        [EnumMember()]
        No = 0,
        
        [EnumMember()]
        Yes = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="MCIResponseStatus", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public enum MCIResponseStatus : int
    {
        
        [EnumMember()]
        OK = 0,
        
        [EnumMember()]
        Error = 1,
        
        [EnumMember()]
        Scheduled = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
    public partial class AifFault : object
    {
        
        private string CustomDetailXmlField;
        
        private System.Collections.Generic.List<FaultMessageList> FaultMessageListArrayField;
        
        private System.Collections.Generic.List<InfologMessage> InfologMessageListField;
        
        private string StackTraceField;
        
        private int XppExceptionTypeField;
        
        [DataMember()]
        public string CustomDetailXml
        {
            get
            {
                return this.CustomDetailXmlField;
            }
            set
            {
                this.CustomDetailXmlField = value;
            }
        }
        
        [DataMember()]
        public System.Collections.Generic.List<FaultMessageList> FaultMessageListArray
        {
            get
            {
                return this.FaultMessageListArrayField;
            }
            set
            {
                this.FaultMessageListArrayField = value;
            }
        }
        
        [DataMember()]
        public System.Collections.Generic.List<InfologMessage> InfologMessageList
        {
            get
            {
                return this.InfologMessageListField;
            }
            set
            {
                this.InfologMessageListField = value;
            }
        }
        
        [DataMember()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
        
        [DataMember()]
        public int XppExceptionType
        {
            get
            {
                return this.XppExceptionTypeField;
            }
            set
            {
                this.XppExceptionTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="FaultMessageList", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
    public partial class FaultMessageList : object
    {
        
        private string DocumentField;
        
        private string DocumentOperationField;
        
        private System.Collections.Generic.List<FaultMessage> FaultMessageArrayField;
        
        private string FieldField;
        
        private string ServiceField;
        
        private string ServiceOperationField;
        
        private string ServiceOperationParameterField;
        
        private string XPathField;
        
        private string XmlLineField;
        
        private string XmlPositionField;
        
        [DataMember()]
        public string Document
        {
            get
            {
                return this.DocumentField;
            }
            set
            {
                this.DocumentField = value;
            }
        }
        
        [DataMember()]
        public string DocumentOperation
        {
            get
            {
                return this.DocumentOperationField;
            }
            set
            {
                this.DocumentOperationField = value;
            }
        }
        
        [DataMember()]
        public System.Collections.Generic.List<FaultMessage> FaultMessageArray
        {
            get
            {
                return this.FaultMessageArrayField;
            }
            set
            {
                this.FaultMessageArrayField = value;
            }
        }
        
        [DataMember()]
        public string Field
        {
            get
            {
                return this.FieldField;
            }
            set
            {
                this.FieldField = value;
            }
        }
        
        [DataMember()]
        public string Service
        {
            get
            {
                return this.ServiceField;
            }
            set
            {
                this.ServiceField = value;
            }
        }
        
        [DataMember()]
        public string ServiceOperation
        {
            get
            {
                return this.ServiceOperationField;
            }
            set
            {
                this.ServiceOperationField = value;
            }
        }
        
        [DataMember()]
        public string ServiceOperationParameter
        {
            get
            {
                return this.ServiceOperationParameterField;
            }
            set
            {
                this.ServiceOperationParameterField = value;
            }
        }
        
        [DataMember()]
        public string XPath
        {
            get
            {
                return this.XPathField;
            }
            set
            {
                this.XPathField = value;
            }
        }
        
        [DataMember()]
        public string XmlLine
        {
            get
            {
                return this.XmlLineField;
            }
            set
            {
                this.XmlLineField = value;
            }
        }
        
        [DataMember()]
        public string XmlPosition
        {
            get
            {
                return this.XmlPositionField;
            }
            set
            {
                this.XmlPositionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="InfologMessage", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.AX.Framework.Services")]
    public partial class InfologMessage : object
    {
        
        private InfologMessageType InfologMessageTypeField;
        
        private string MessageField;
        
        [DataMember()]
        public InfologMessageType InfologMessageType
        {
            get
            {
                return this.InfologMessageTypeField;
            }
            set
            {
                this.InfologMessageTypeField = value;
            }
        }
        
        [DataMember()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="FaultMessage", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
    public partial class FaultMessage : object
    {
        
        private string CodeField;
        
        private string MessageField;
        
        [DataMember()]
        public string Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                this.CodeField = value;
            }
        }
        
        [DataMember()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [DataContract(Name="InfologMessageType", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.AX.Framework.Services")]
    public enum InfologMessageType : int
    {
        
        [EnumMember()]
        Info = 0,
        
        [EnumMember()]
        Warning = 1,
        
        [EnumMember()]
        Error = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", ConfigurationName="TSD.DataCollector.Client.AxaptaWebService.MCI")]
    public interface MCI
    {
        
        // CODEGEN: Generating message contract since the wrapper name (MCIReplyRequest) of message MCIReplyRequest does not match the default value (reply)
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/reply", ReplyAction="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/replyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AifFault), Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/replyAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        MCIReplyResponse reply(MCIReplyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/reply", ReplyAction="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/replyResponse")]
        System.Threading.Tasks.Task<MCIReplyResponse> replyAsync(MCIReplyRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (MCIGetDeviceGroupsRequest) of message MCIGetDeviceGroupsRequest does not match the default value (getDeviceGroups)
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroups", ReplyAction="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(AifFault), Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupsAifFaul" +
                                                                             "tFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        MCIGetDeviceGroupsResponse getDeviceGroups(MCIGetDeviceGroupsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroups", ReplyAction="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupsRespons" +
            "e")]
        System.Threading.Tasks.Task<MCIGetDeviceGroupsResponse> getDeviceGroupsAsync(MCIGetDeviceGroupsRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (MCIGetDeviceGroupIdRequest) of message MCIGetDeviceGroupIdRequest does not match the default value (getDeviceGroupId)
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupId", ReplyAction="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupIdRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(AifFault), Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupIdAifFau" +
                                                                             "ltFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        MCIGetDeviceGroupIdResponse getDeviceGroupId(MCIGetDeviceGroupIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupId", ReplyAction="http://schemas.microsoft.com/dynamics/2008/01/services/MCI/getDeviceGroupIdRespon" +
            "se")]
        System.Threading.Tasks.Task<MCIGetDeviceGroupIdResponse> getDeviceGroupIdAsync(MCIGetDeviceGroupIdRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MCIReplyRequest", WrapperNamespace="http://schemas.microsoft.com/dynamics/2008/01/services", IsWrapped=true)]
    public partial class MCIReplyRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.microsoft.com/dynamics/2010/01/datacontracts")]
        public CallContext CallContext;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", Order=0)]
        public MCIServiceRequest _request;
        
        public MCIReplyRequest()
        {
        }
        
        public MCIReplyRequest(CallContext CallContext, MCIServiceRequest _request)
        {
            this.CallContext = CallContext;
            this._request = _request;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MCIReplyResponse", WrapperNamespace="http://schemas.microsoft.com/dynamics/2008/01/services", IsWrapped=true)]
    public partial class MCIReplyResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", Order=0)]
        public MCIServiceResponse response;
        
        public MCIReplyResponse()
        {
        }
        
        public MCIReplyResponse(MCIServiceResponse response)
        {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MCIGetDeviceGroupsRequest", WrapperNamespace="http://schemas.microsoft.com/dynamics/2008/01/services", IsWrapped=true)]
    public partial class MCIGetDeviceGroupsRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.microsoft.com/dynamics/2010/01/datacontracts")]
        public CallContext CallContext;
        
        public MCIGetDeviceGroupsRequest()
        {
        }
        
        public MCIGetDeviceGroupsRequest(CallContext CallContext)
        {
            this.CallContext = CallContext;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MCIGetDeviceGroupsResponse", WrapperNamespace="http://schemas.microsoft.com/dynamics/2008/01/services", IsWrapped=true)]
    public partial class MCIGetDeviceGroupsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", Order=0)]
        public System.Collections.Generic.List<string> response;
        
        public MCIGetDeviceGroupsResponse()
        {
        }
        
        public MCIGetDeviceGroupsResponse(System.Collections.Generic.List<string> response)
        {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MCIGetDeviceGroupIdRequest", WrapperNamespace="http://schemas.microsoft.com/dynamics/2008/01/services", IsWrapped=true)]
    public partial class MCIGetDeviceGroupIdRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.microsoft.com/dynamics/2010/01/datacontracts")]
        public CallContext CallContext;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", Order=0)]
        public string _deviceIdInternal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", Order=1)]
        public string _ipAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", Order=2)]
        public string _macAddress;
        
        public MCIGetDeviceGroupIdRequest()
        {
        }
        
        public MCIGetDeviceGroupIdRequest(CallContext CallContext, string _deviceIdInternal, string _ipAddress, string _macAddress)
        {
            this.CallContext = CallContext;
            this._deviceIdInternal = _deviceIdInternal;
            this._ipAddress = _ipAddress;
            this._macAddress = _macAddress;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MCIGetDeviceGroupIdResponse", WrapperNamespace="http://schemas.microsoft.com/dynamics/2008/01/services", IsWrapped=true)]
    public partial class MCIGetDeviceGroupIdResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/dynamics/2008/01/services", Order=0)]
        public string response;
        
        public MCIGetDeviceGroupIdResponse()
        {
        }
        
        public MCIGetDeviceGroupIdResponse(string response)
        {
            this.response = response;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface MCIChannel : MCI, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MCIClient : System.ServiceModel.ClientBase<MCI>, MCI
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MCIClient() : 
                base(MCIClient.GetDefaultBinding(), MCIClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_MCI.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MCIClient(EndpointConfiguration endpointConfiguration) : 
                base(MCIClient.GetBindingForEndpoint(endpointConfiguration), MCIClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MCIClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MCIClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MCIClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MCIClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MCIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MCIReplyResponse MCI.reply(MCIReplyRequest request)
        {
            return base.Channel.reply(request);
        }
        
        public MCIServiceResponse reply(CallContext CallContext, MCIServiceRequest _request)
        {
            MCIReplyRequest inValue = new MCIReplyRequest();
            inValue.CallContext = CallContext;
            inValue._request = _request;
            MCIReplyResponse retVal = ((MCI)(this)).reply(inValue);
            return retVal.response;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MCIReplyResponse> MCI.replyAsync(MCIReplyRequest request)
        {
            return base.Channel.replyAsync(request);
        }
        
        public System.Threading.Tasks.Task<MCIReplyResponse> replyAsync(CallContext CallContext, MCIServiceRequest _request)
        {
            MCIReplyRequest inValue = new MCIReplyRequest();
            inValue.CallContext = CallContext;
            inValue._request = _request;
            return ((MCI)(this)).replyAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MCIGetDeviceGroupsResponse MCI.getDeviceGroups(MCIGetDeviceGroupsRequest request)
        {
            return base.Channel.getDeviceGroups(request);
        }
        
        public System.Collections.Generic.List<string> getDeviceGroups(CallContext CallContext)
        {
            MCIGetDeviceGroupsRequest inValue = new MCIGetDeviceGroupsRequest();
            inValue.CallContext = CallContext;
            MCIGetDeviceGroupsResponse retVal = ((MCI)(this)).getDeviceGroups(inValue);
            return retVal.response;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MCIGetDeviceGroupsResponse> MCI.getDeviceGroupsAsync(MCIGetDeviceGroupsRequest request)
        {
            return base.Channel.getDeviceGroupsAsync(request);
        }
        
        public System.Threading.Tasks.Task<MCIGetDeviceGroupsResponse> getDeviceGroupsAsync(CallContext CallContext)
        {
            MCIGetDeviceGroupsRequest inValue = new MCIGetDeviceGroupsRequest();
            inValue.CallContext = CallContext;
            return ((MCI)(this)).getDeviceGroupsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MCIGetDeviceGroupIdResponse MCI.getDeviceGroupId(MCIGetDeviceGroupIdRequest request)
        {
            return base.Channel.getDeviceGroupId(request);
        }
        
        public string getDeviceGroupId(CallContext CallContext, string _deviceIdInternal, string _ipAddress, string _macAddress)
        {
            MCIGetDeviceGroupIdRequest inValue = new MCIGetDeviceGroupIdRequest();
            inValue.CallContext = CallContext;
            inValue._deviceIdInternal = _deviceIdInternal;
            inValue._ipAddress = _ipAddress;
            inValue._macAddress = _macAddress;
            MCIGetDeviceGroupIdResponse retVal = ((MCI)(this)).getDeviceGroupId(inValue);
            return retVal.response;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MCIGetDeviceGroupIdResponse> MCI.getDeviceGroupIdAsync(MCIGetDeviceGroupIdRequest request)
        {
            return base.Channel.getDeviceGroupIdAsync(request);
        }
        
        public System.Threading.Tasks.Task<MCIGetDeviceGroupIdResponse> getDeviceGroupIdAsync(CallContext CallContext, string _deviceIdInternal, string _ipAddress, string _macAddress)
        {
            MCIGetDeviceGroupIdRequest inValue = new MCIGetDeviceGroupIdRequest();
            inValue.CallContext = CallContext;
            inValue._deviceIdInternal = _deviceIdInternal;
            inValue._ipAddress = _ipAddress;
            inValue._macAddress = _macAddress;
            return ((MCI)(this)).getDeviceGroupIdAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_MCI))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Basic;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_MCI))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.0.132:80" +
                        "ppservice.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MCIClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_MCI);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MCIClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_MCI);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_MCI,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/netfx/2009/05/routing", ConfigurationName="TSD.DataCollector.Client.AxaptaWebService.IRequestReplyRouter")]
    public interface IRequestReplyRouter
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IRequestReplyRouterChannel : IRequestReplyRouter, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class RequestReplyRouterClient : System.ServiceModel.ClientBase<IRequestReplyRouter>, IRequestReplyRouter
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RequestReplyRouterClient() : 
                base(RequestReplyRouterClient.GetDefaultBinding(), RequestReplyRouterClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.serviceEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(EndpointConfiguration endpointConfiguration) : 
                base(RequestReplyRouterClient.GetBindingForEndpoint(endpointConfiguration), RequestReplyRouterClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RequestReplyRouterClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RequestReplyRouterClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.serviceEndpoint))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Basic;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.serviceEndpoint))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.0.132:80" +
                        "ppservice.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RequestReplyRouterClient.GetBindingForEndpoint(EndpointConfiguration.serviceEndpoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RequestReplyRouterClient.GetEndpointAddress(EndpointConfiguration.serviceEndpoint);
        }
        
        public enum EndpointConfiguration
        {
            
            serviceEndpoint,
        }
    }
}
